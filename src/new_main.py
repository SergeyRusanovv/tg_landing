import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, Update
from aiogram.filters import CommandStart

from fastapi import FastAPI, Request, Form
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

import smtplib
from email.message import EmailMessage
from config import AppConfig


app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="templates")
bot = Bot(token=AppConfig.BOT_TOKEN.get_secret_value())
dp = Dispatcher()


@dp.message(CommandStart())
async def start(message: Message) -> None:
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –ª–µ–Ω–¥–∏–Ω–≥...', web_app=WebAppInfo(url=AppConfig.WEBAPP_URL))]
    ])
    await message.answer("Hello!", reply_markup=markup)


@app.get(path="/")
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@app.post(path="/submit")
async def submit(
    request: Request,
    first_name: str = Form(...),
    last_name: str = Form(...),
    email: str = Form(...),
    phone: str = Form(None),
    telegram: str = Form(None),
):

    send_email = EmailMessage()
    send_email["Subject"] = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"
    send_email["From"] = AppConfig.SMTP_USER
    send_email["To"] = email
    send_email['Disposition-Notification-To'] = AppConfig.SMTP_USER

    phone_number = phone if phone else "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    telegram_url = telegram if telegram else "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º"

    await bot.send_message(
        chat_id=AppConfig.TG_CHAT_ID,
        text=f"–ò–º—è: {first_name}\n–§–∞–º–∏–ª–∏—è: {last_name}\nEmail: {email}\nTelegram url: {telegram_url}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}"
    )

    send_email.set_content(
        "<div>"
        f'<h1 style="color: red;">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {first_name} {last_name} üòä</h1><p>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—É—á–µ–Ω—ã. '
        f'Email: {email}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}, –°—Å—ã–ª–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º: {telegram_url}</p></div>',
        subtype="html",
    )

    with smtplib.SMTP_SSL(AppConfig.SMTP_HOST, AppConfig.SMTP_PORT) as server:
        server.login(AppConfig.SMTP_USER, AppConfig.SMTP_PASSWORD)
        server.send_message(send_email)

    return templates.TemplateResponse("submit.html", {"request": request})


async def start_bot():
    print("–ë–æ—Ç –ø–æ–ª–µ—Ç–µ–ª")
    await dp.start_polling(bot)


async def start_web():
    print("–í–µ–± –ø–æ–ª–µ—Ç–µ–ª")
    import uvicorn
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()


async def main():
    await asyncio.gather(start_bot(), start_web())


if __name__ == "__main__":
    asyncio.run(main())
